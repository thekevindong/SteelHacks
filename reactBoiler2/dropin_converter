{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "11b2b49b-5e71-4462-a01b-0f57c367e2d9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wrote: out_v2/wwph.json\n"
     ]
    }
   ],
   "source": [
    "import json, os\n",
    "\n",
    "IN_PATH  = \"out/wwph.json\"   \n",
    "OUT_DIR  = \"out_v2\"           \n",
    "os.makedirs(OUT_DIR, exist_ok=True)\n",
    "\n",
    "PRETTY_BUILDING_NAME = {\n",
    "    \"wwph\": \"Wesley W Posvar Hall\",\n",
    "}\n",
    "def convert_current_to_target(in_path: str, pretty_names: dict) -> str:\n",
    "    with open(in_path, \"r\") as f:\n",
    "        src = json.load(f)\n",
    "\n",
    "    bkey = (src.get(\"building\") or src.get(\"building_name\") or \"unknown\").strip()\n",
    "    rooms_dict = src.get(\"rooms\", {})\n",
    "\n",
    "    building_name = pretty_names.get(bkey, bkey.title())\n",
    "    out_obj = {\"building_name\": building_name, \"rooms\": []}\n",
    "    for room_number in sorted(rooms_dict.keys()):\n",
    "        classes_dict = rooms_dict[room_number].get(\"classes\", {})\n",
    "        classes_arr = []\n",
    "\n",
    "        for course_name in sorted(classes_dict.keys()):\n",
    "            scheds = classes_dict[course_name].get(\"schedules\", [])\n",
    "\n",
    "            seen = set()\n",
    "            uniq = []\n",
    "            for s in scheds:\n",
    "                key = (s.get(\"date\",\"\"), s.get(\"timeFrame\",\"\"))\n",
    "                if key not in seen:\n",
    "                    seen.add(key)\n",
    "                    uniq.append({\"date\": key[0], \"timeFrame\": key[1]})\n",
    "            uniq.sort(key=lambda x: (x[\"date\"], x[\"timeFrame\"]))\n",
    "\n",
    "            classes_arr.append({\n",
    "                \"class_type\": course_name,  \n",
    "                \"schedules\": uniq\n",
    "            })\n",
    "\n",
    "        out_obj[\"rooms\"].append({\n",
    "            \"room_number\": str(room_number),  \n",
    "            \"classes\": classes_arr\n",
    "        })\n",
    "    base = os.path.splitext(os.path.basename(in_path))[0]\n",
    "    out_path = os.path.join(OUT_DIR, f\"{base}.json\")\n",
    "    with open(out_path, \"w\") as f:\n",
    "        json.dump(out_obj, f, indent=2)\n",
    "    return out_path\n",
    "converted_path = convert_current_to_target(IN_PATH, PRETTY_BUILDING_NAME)\n",
    "print(\"Wrote:\", converted_path)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.13.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
